stages:
  - build
  - deploy
  - test

# before merging into dev we check if the frontend still works
test_mr:
  image: mcr.microsoft.com/playwright:v1.39.0-jammy
  stage: test
  tags:
    - docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"
  script:
    - yarn install
    - yarn build
    - yarn playwright-cli

build:
  image: node:lts-slim
  stage: build
  only:
    - dev
    - main
    - release
  script:
    - yarn install
    - yarn run build
  artifacts:
    paths:
      - .output/

.docker-build-and-push: &docker-build-and-push
  image: docker:latest
  stage: deploy
  needs: [build]
  dependencies: [build]
  services:
    - docker:dind
  tags:
    - dind
    - docker
  script:
    - docker login -u "$CI_DEPLOY_USER" -p "$CI_DEPLOY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/frontend$IMAGE_NAME_SUFFIX:latest -t $CI_REGISTRY_IMAGE/frontend$IMAGE_NAME_SUFFIX:$IMAGE_TAG -f ./Docker/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/frontend$IMAGE_NAME_SUFFIX:latest
    - docker push $CI_REGISTRY_IMAGE/frontend$IMAGE_NAME_SUFFIX:$IMAGE_TAG

release-deploy:
  <<: *docker-build-and-push
  only:
    - release
  before_script:
    - apk update
    - apk add jq
    - echo $(date)
    - export IMAGE_NAME_SUFFIX=""
    - export IMAGE_TAG=$(jq -r ".version" package.json)

staging-deploy:
  <<: *docker-build-and-push
  only:
    - main
  before_script:
    - apk update
    - apk add jq
    - echo $(date)
    - export IMAGE_NAME_SUFFIX="-staging"
    - export IMAGE_TAG=$(jq -r ".version" package.json)

dev-deploy:
  <<: *docker-build-and-push
  only:
    - dev
  before_script:
    - echo $(date)
    - export IMAGE_NAME_SUFFIX="-dev"
    - export IMAGE_TAG=$CI_COMMIT_SHORT_SHA
